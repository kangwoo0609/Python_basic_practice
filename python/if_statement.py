# 1. 조건문 예제
# - 특정 조건이 만족하면 코드를 실행하고 싶다.
N = 15
# 10 보다 작으면 출력
# if: 첫 번째 조건에 대한 처리
if N < 10:
    print("10보다 작다")
# 10보다 크거나 같은데, 20보다는 작다
# elif: 첫 번째 조건은 만족하지 않으면서,
#       추가적인 조건에 대한 처리
elif N < 20:
    print("20보다 작다")
# else: 나머지 조건들에 대한 실행 (20이상인 수)
else:
    print("나머지 수")


# ----------------------------------------------------------
# ----------------------------------------------------------

# 놀이공원에 갔다!
# 내가 해당 놀이기구를 탈 수 있는 지 없는 지 체크하는 프로그램

# ✅ [문제 1] 키(cm)를 매개변수로 받아 140 이상이면 
#   - "탑승 가능합니다."를, 
#   - 그렇지 않으면 "탑승 불가입니다."
# 를 출력하세요.
def step1(cm=140):
    # if: cm 가 140 이상인가?
    # else: 아닌가?
    if cm >= 140:
        print("탑승 가능합니다.")
    else:
        print("탑승 불가입니다.")

# ✅ [문제 2] 나이(age)와 키(cm)를 매개변수로 받아, 
#   - 나이가 12세 이상이고 키가 140cm 이상이면 
#           "탑승 가능합니다."를 출력하고,
#           그렇지 않으면 "탑승 불가입니다."를 출력하세요.

print(True and False) # False
print(True or False) # True

def step2(age, cm):
    # 두 조건을 모두 만족해야만, 탑승 가능
    if age >= 12 and cm >= 140:
        print("탑승 가능")
    else:
        print("탑승 불가")

    # 중첩 조건문으로도 구현할 수 있다
    # - 각 조건에 대해 조금 더 상세하게 분기를 하고 싶을 때 중첩 조건문 활용
    if age >= 12:
        if cm >= 140:
            print("탑승 가능")
        else:
            print("키가 안됩니다")
    else:
        print("나이가 안됩니다")


# ✅ [문제 3] 나이(age)와 키(cm), 보호자 동반 여부(문자 'y' 또는 'n')를 
#           매개변수로 받아 다음 조건에 따라 탑승 가능 여부를 출력하세요.
#   - 키가 140 이상이고 나이가 12세 이상이면 "탑승 가능 (단독)" 출력
#   - 키는 140 이상이지만 나이가 12세 미만이면
#       보호자 동반 여부에 따라 판단
#       - 보호자 동반 시: "탑승 가능 (보호자 동반)" 출력
#       - 보호자 동반 X: "혼자서는 탑승 불가" 출력
#   - 키가 140 미만이면 "키 제한으로 탑승 불가" 출력

def step3(age, cm, guardian):
    if cm >= 140:
        if age >= 12:
            print("탑승 가능 (단독)")
        else:
            if guardian == 'y':
                print("탑승 가능 (보호자 동반)")
            else:
                print("혼자서는 탑승 불가")
    else:
        print("키 제한으로 탑승 불가")
    
step3(14, 130, 'n')



# -------------------------------------------------------------------..
#--------------------------------------------------------------------


# 반복문 요약
# - for vs while

# for 문
# - 반복한 자료나 범위가 명확할 때 (반복 횟수가 정해져 있을 때)
# - 예) 1~10까지 출력, 리스트 순회 등

# for <변수> in <반복객체>:
#     pass

# while 문
# - 어떤 조건이 만족될 때까지 반복해야 할 때
# - 예) 비밀번호 입력, 누적 합이 특정 수를 넘기 전까지 반복

# while <표현식>:
#     pass

# # 무한루프가 돈다
# while True:
#     # 조건문으로 반복이 중지하는 상황을 만들어 주어야 한다.
#     if 표현식:
#         break  # break: 한 겹의 반복문을 멈춘다.

numbers = [2, 3, 4, 5, 6]

# 가장 기본적인 활용법
for num in numbers:
    print(num, end=' ')
    num += 5
print()
print(numbers)

for i in range(len(numbers)):
    print(numbers[i], end=' ')
    numbers[i] += 5  # 원본 배열이 변한다.
print()
print(numbers)

# 짝수만 출력
for i in range(len(numbers)):
    # 1. 짝수라는 조건이 만족할 때만 출력해라
    # - 조건이 간단할 때는, 만족할 때만 실행해라! 라는 방법
    if numbers[i] % 2 == 0:
        print(numbers[i], end=' ')

    # 2. 짝수라는 조건이 만족하지 않을 때는 건너뛰어라
    if numbers[i] % 2 == 1:
        continue

    print(numbers[i], end=' ')
print()

for i in range(5):
    if i > 2:
        break

    for j in range(1000000):
        if j == 0:
            continue # 다음 반복으로 이동

        if j > 2:
            break # 반복문을 바로 탈출

        print(i, j)
    print()


# [문제] 정수 n에 아무 숫자나 넣고,
#   1부터 숫자를 1씩 증가시키며 계속 합하다가, (1+2+3+4....)
#   누적 합이 n 이상이 되면 중지하고, (== n보다 작으면 더해라)
# 그때 사용된 마지막 숫자를 출력하세요.

def solution(n):
    total = 0   # 누적합
    now = 1     # 1부터 증가할 변수
    
    while total < n:
        total += now
        # if total >= n:
        #     break
        now += 1
    
    print(f'누적 합이 {n} 이상이 된 시점 마지막 숫자 = {now - 1}')

solution(25)
